import {useEffect, useRef, useState} from 'react';import { BlockMath } from 'react-katex';function TrialDivision() {    const [input, setInput] = useState('');    const [visibleSteps, setVisibleSteps] = useState<string[]>([]);    const [factorMap, setFactorMap] = useState<Map<number, number>>(new Map());    const [animating, setAnimating] = useState(false);    const scrollContainerRef = useRef<HTMLDivElement>(null);    const startAnimation = (steps: string[]) => {        let i = 0;        setVisibleSteps([]);        setAnimating(true);        const interval = setInterval(() => {            setVisibleSteps((prev) => [...prev, steps[i-1]]);            i++;            if (i >= steps.length) {                clearInterval(interval);                setAnimating(false);            }        }, 500);    };    const factorize = (n: number) => {        const steps: string[] = [];        const map = new Map<number, number>();        let num = n;        let d = 2;        while (d * d <= num) {            if (num % d === 0) {                steps.push(`\\text{Try } ${d} \\rightarrow ${num} \\bmod ${d} = 0 \\Rightarrow \\text{Factor found: } ${d}`);                num = Math.floor(num / d);                map.set(d, (map.get(d) || 0) + 1);            } else {                steps.push(`\\text{Try } ${d} \\rightarrow ${num} \\bmod ${d} \\ne 0`);                d++;            }        }        // Final check for remaining prime number        if (num > 1) {            steps.push(`\\text{Try } ${num} \\rightarrow \\text{No divisors left, } ${num} \\text{ is prime} \\Rightarrow \\text{Stop}`);            map.set(num, (map.get(num) || 0) + 1);        }        setFactorMap(map);        startAnimation(steps);    };    // Format factors like: 2 \times 5^2    const formatFactorProduct = () => {        if (factorMap.size === 0) return '';        const parts: string[] = [];        factorMap.forEach((count, prime) => {            parts.push(count === 1 ? `${prime}` : `${prime}^{${count}}`);        });        return parts.join(' \\times ');    };    // Scroll to the bottom of the container when new steps are added    useEffect(() => {        const container = scrollContainerRef.current;        if (container) {            container.scrollTop = container.scrollHeight;        }    }, [visibleSteps]);    return (        <div className="p-6 text-gray-800 font-mono">            <div className="max-w-2xl mx-auto bg-white shadow-xl rounded-lg p-6">                <h1 className="text-3xl font-bold mb-[25px] text-center">Trial Division Algorithm</h1>                <form className="flex gap-[8px] mb-[20px]">                    <input                        type="number"                        className="outline-none border border-gray-300 rounded px-[16px] py-[8px] w-full sm:w-auto"                        placeholder="Enter a number"                        value={input}                        onChange={(e) => setInput(e.target.value)}                    />                    <button                        onClick={() => factorize(Number(input))}                        className="cursor-pointer text-white px-[12px] py-[10px] rounded transition"                        disabled={animating}                    >                        {animating ? 'Running...' : 'Factorize'}                    </button>                </form>                {/* üîÅ Step-by-step LaTeX */}                <div ref={scrollContainerRef} className="bg-slate-50 overflow-y-auto scroll-auto max-h-[500px] space-y-3">                    {visibleSteps.map((latex, idx) => (                        <div key={idx} className="text-lg transition-opacity duration-500 ease-in">                            <BlockMath>{latex}</BlockMath>                        </div>                    ))}                </div>                {/* üßÆ Final Factor Result */}                {factorMap.size > 0 && !animating && (                    <div className="flex items-center justify-center text-center">                        <p className="text-xl text-gray-700 mr-[10px]">Prime factorization:</p>                        <BlockMath>                            {formatFactorProduct()}                        </BlockMath>                    </div>                )}                </div>        </div>    );}export default TrialDivision;